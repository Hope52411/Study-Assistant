<!DOCTYPE html>
<html>
  <head>
    <title>Study Assistant</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <!-- CSS and JS -->
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    <%= favicon_link_tag 'favicon.ico', rel: 'icon', type: 'image/x-ico' %>
    <%= javascript_pack_tag 'application', 'data-turbo-track': 'reload', defer: true %>
    <%= stylesheet_link_tag 'application', 'data-turbo-track': 'reload' %>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Background Style -->
    <style>
      body {
        margin: 0;
      }

      #background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1; /* Ensures the background stays behind content */
        background: linear-gradient(120deg, rgb(4, 2, 49), rgb(13, 13, 154), #00d4ff);
      }
    </style>
  </head>

  <body>
    <!-- Canvas for animated background -->
    <canvas id="background"></canvas>

    <div class="container mt-5">
      <!-- Flash messages -->
      <% flash.each do |key, message| %>
        <div class="alert <%= bootstrap_class_for(key) %> alert-dismissible fade show" role="alert">
          <%= message %>
          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
      <% end %>

      <!-- Main content -->
      <%= yield %>
    </div>

    <!-- JavaScript for animated background -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const canvas = document.getElementById("background");
        const ctx = canvas.getContext("2d");

        // Adjust canvas size to fit the screen
        function resizeCanvas() {
          canvas.width = window.innerWidth;
          canvas.height = window.innerHeight;
        }
        resizeCanvas();
        window.addEventListener("resize", resizeCanvas);

        // Generate stars
        const stars = Array.from({ length: 300 }, () => ({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          radius: Math.random() * 2,
          speed: Math.random() * 0.2 + 0.1,
        }));

        // Generate meteors
        const meteors = Array.from({ length: 5 }, () => ({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height / 2,
          dx: Math.random() * 2 + 2, // Horizontal speed
          dy: Math.random() * 1 + 1, // Vertical speed
          length: Math.random() * 100 + 50,
          alpha: Math.random() * 0.5 + 0.5, // Transparency
          fade: Math.random() * 0.01 + 0.005, // Fading speed
        }));

        // Draw stars on the canvas
        function drawStars() {
          stars.forEach((star) => {
            ctx.beginPath();
            ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
            ctx.fillStyle = "rgba(255, 255, 255, 0.8)";
            ctx.fill();
            star.x -= star.speed; // Move stars to the left
            if (star.x < 0) {
              star.x = canvas.width;
              star.y = Math.random() * canvas.height;
            }
          });
        }

        // Draw meteors on the canvas
        function drawMeteors() {
          meteors.forEach((meteor, index) => {
            ctx.beginPath();
            const gradient = ctx.createLinearGradient(
              meteor.x,
              meteor.y,
              meteor.x + meteor.length,
              meteor.y + meteor.length
            );
            gradient.addColorStop(0, `rgba(255, 255, 255, ${meteor.alpha})`);
            gradient.addColorStop(1, "rgba(4, 9, 158, 0)");
            ctx.strokeStyle = gradient;
            ctx.lineWidth = 2;
            ctx.moveTo(meteor.x, meteor.y);
            ctx.lineTo(
              meteor.x + meteor.length,
              meteor.y + meteor.length
            );
            ctx.stroke();

            meteor.x += meteor.dx; // Horizontal movement
            meteor.y += meteor.dy; // Vertical movement
            meteor.alpha -= meteor.fade; // Gradually fade out

            if (meteor.alpha <= 0) {
              meteors[index] = {
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height / 2,
                dx: Math.random() * 2 + 2,
                dy: Math.random() * 1 + 1,
                length: Math.random() * 100 + 50,
                alpha: Math.random() * 0.5 + 0.5,
                fade: Math.random() * 0.01 + 0.005,
              };
            }
          });
        }

        // Main animation loop
        function animate() {
          ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
          drawStars(); // Draw stars
          drawMeteors(); // Draw meteors
          requestAnimationFrame(animate); // Keep the animation running
        }

        animate(); // Start the animation
      });
    </script>
  </body>
</html>
